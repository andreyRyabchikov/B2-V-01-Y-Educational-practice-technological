package org.example;

import org.junit.jupiter.api.*;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.ValueSource;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.junit.jupiter.api.Assertions.*;

class ScoreManagerTest {
    private ScoreManager scoreManager;
    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;

    @BeforeEach
    void setUp() {
        System.setOut(new PrintStream(outContent));
        scoreManager = new ScoreManager(10);
    }

    @AfterEach
    void tearDown() {
        System.setOut(originalOut);
    }

    @Test
    @DisplayName("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤")
    void constructor_ShouldSetTotalQuestions() {
        ScoreManager sm = new ScoreManager(15);
        assertEquals(15, getTotalQuestions(sm));
    }

    @ParameterizedTest
    @ValueSource(ints = {1, 5, 10})
    @DisplayName("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫")
    void addCorrect_ShouldIncrementCounters(int times) {
        for (int i = 0; i < times; i++) {
            scoreManager.addCorrect();
        }
        assertEquals(times, scoreManager.getCorrectAnswers());
    }

    @Test
    @DisplayName("–°–µ—Ä–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è")
    void addCorrect_ShouldTrackStreak() {
        scoreManager.addCorrect();
        scoreManager.addCorrect();
        assertEquals(2, getCurrentStreak(scoreManager));
    }

    @Test
    @DisplayName("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è")
    void addCorrect_ShouldUpdateMaxStreak() {
        scoreManager.addCorrect();
        scoreManager.addCorrect();
        assertEquals(2, getMaxStreak(scoreManager));

        scoreManager = new ScoreManager(10);
        scoreManager.addCorrect();
        scoreManager.addCorrect();
        scoreManager.addCorrect();
        assertEquals(3, getMaxStreak(scoreManager));
    }

    @ParameterizedTest
    @CsvSource({
            "1, 0",
            "2, 0",
            "3, 3",
            "5, 5"
    })
    @DisplayName("–ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    void streakBonus_ShouldReturnCorrectValue(int streakLength, int expectedBonus) {
        for (int i = 0; i < streakLength; i++) {
            scoreManager.addCorrect();
        }
        assertEquals(expectedBonus, getCurrentBonus(scoreManager));
    }

    @Test
    @DisplayName("–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –∏–¥–µ–∞–ª—å–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
    void printFinalResult_ShouldShowPerfectMessage() {
        ScoreManager perfectScore = new ScoreManager(3);
        perfectScore.addCorrect();
        perfectScore.addCorrect();
        perfectScore.addCorrect();

        perfectScore.printFinalResult();

        String output = outContent.toString();
        assertTrue(output.contains("‚òÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: 3"));
        assertTrue(output.contains("üéâ –ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"));
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –ø–æ–ª—è–º
    private int getTotalQuestions(ScoreManager sm) {
        try {
            var field = ScoreManager.class.getDeclaredField("totalQuestions");
            field.setAccessible(true);
            return (int) field.get(sm);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private int getCurrentStreak(ScoreManager sm) {
        try {
            var field = ScoreManager.class.getDeclaredField("streak");
            field.setAccessible(true);
            return (int) field.get(sm);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private int getMaxStreak(ScoreManager sm) {
        try {
            var field = ScoreManager.class.getDeclaredField("maxStreak");
            field.setAccessible(true);
            return (int) field.get(sm);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private int getCurrentBonus(ScoreManager sm) {
        try {
            var method = ScoreManager.class.getDeclaredMethod("streakBonus");
            method.setAccessible(true);
            return (int) method.invoke(sm);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}